{
  "info": {
    "_postman_id": "fbcbaecc-d86f-42f0-96f0-ce4f1f84db65",
    "name": "Project Manager API",
    "description": "Complete API collection for Project Manager with authentication and CRUD operations",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "28411556"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Sign Up (Email/Password)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.environment.set('access_token', response.token);",
                  "        pm.environment.set('token_expiry', Date.now() + (24 * 60 * 60 * 1000)); // 24 hours",
                  "    }",
                  "    if (response.user) {",
                  "        pm.environment.set('user_id', response.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"{{test_name}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/sign-up/email",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "sign-up",
                "email"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Sign In (Email/Password)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.environment.set('access_token', response.token);",
                  "        pm.environment.set('token_expiry', Date.now() + (24 * 60 * 60 * 1000)); // 24 hours",
                  "        console.log('Token saved:', response.token);",
                  "    }",
                  "    if (response.user) {",
                  "        pm.environment.set('user_id', response.user.id);",
                  "        console.log('User ID saved:', response.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/sign-in/email",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "sign-in",
                "email"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.user) {",
                  "        pm.environment.set('user_id', response.user.id);",
                  "        console.log('Current user:', response.user.email);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/get-session",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "get-session"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Sign Out",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear tokens on successful sign out",
                  "if (pm.response.code === 200) {",
                  "    pm.environment.unset('access_token');",
                  "    pm.environment.unset('token_expiry');",
                  "    pm.environment.unset('user_id');",
                  "    console.log('Tokens cleared');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/sign-out",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "sign-out"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Projects",
      "item": [
        {
          "name": "Get All Projects",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "// Save first project ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    const projects = pm.response.json();",
                  "    if (projects.length > 0) {",
                  "        pm.environment.set('project_id', projects[0].id);",
                  "        console.log('First project ID saved:', projects[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has project data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "});",
                  "",
                  "// Save created project ID",
                  "if (pm.response.code === 201) {",
                  "    const project = pm.response.json();",
                  "    pm.environment.set('project_id', project.id);",
                  "    console.log('New project created with ID:', project.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"New Project\",\n  \"description\": \"Short description\",\n  \"longDescription\": {\n    \"content\": []\n  },\n  \"category\": \"{{projectCategory}}\",\n  \"environment\": \"{{projectEnvironment}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.title).to.include('Updated');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Project\",\n  \"environment\": \"{{projectEnvironment}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Projects",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects?page=1&pageSize=10&search=&category={{projectCategory}}&environment={{projectEnvironment}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "category",
                  "value": "{{projectCategory}}"
                },
                {
                  "key": "environment",
                  "value": "{{projectEnvironment}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Project By Id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notes",
      "item": [
        {
          "name": "Get Project Notes",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "// Save first note ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    const notes = pm.response.json();",
                  "    if (notes.length > 0) {",
                  "        pm.environment.set('note_id', notes[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/notes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "notes"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Note",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has note data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "});",
                  "",
                  "// Save created note ID",
                  "if (pm.response.code === 201) {",
                  "    const note = pm.response.json();",
                  "    pm.environment.set('note_id', note.id);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Meeting notes\",\n  \"description\": \"Summary of meeting\",\n  \"content\": {\n    \"blocks\": []\n  },\n  \"status\": \"{{noteStatus}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/notes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "notes"
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Notes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/notes?page=1&pageSize=10&status={{noteStatusFilter}}&search=",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "notes"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "{{noteStatusFilter}}"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Note",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/notes/{{note_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "notes",
                "{{note_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Note",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated notes\",\n  \"status\": \"{{noteStatusUpdated}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/notes/{{note_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "notes",
                "{{note_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Note",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/notes/{{note_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "notes",
                "{{note_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Todos",
      "item": [
        {
          "name": "Get Project Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "// Save first todo ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    const todos = pm.response.json();",
                  "    if (todos.length > 0) {",
                  "        pm.environment.set('todo_id', todos[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/todos",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "todos"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has todo data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "});",
                  "",
                  "// Save created todo ID",
                  "if (pm.response.code === 201) {",
                  "    const todo = pm.response.json();",
                  "    pm.environment.set('todo_id', todo.id);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Design Landing Page\",\n  \"priority\": \"{{todoPriority}}\",\n  \"status\": \"{{todoStatus}}\",\n  \"dueDate\": \"2025-01-31T12:00:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/todos",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "todos"
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Todos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/todos?page=1&pageSize=10&status={{todoStatusFilter}}&priority={{todoPriorityFilter}}&search=",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "todos"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "{{todoStatusFilter}}"
                },
                {
                  "key": "priority",
                  "value": "{{todoPriorityFilter}}"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Todo",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/todos/{{todo_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "todos",
                "{{todo_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Todo",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"{{todoStatusUpdated}}\",\n  \"completedAt\": \"{{#timestamp}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/todos/{{todo_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "todos",
                "{{todo_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Todo",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/todos/{{todo_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "todos",
                "{{todo_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Revisions",
      "item": [
        {
          "name": "Get Project Revisions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "// Save first revision ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    const revisions = pm.response.json();",
                  "    if (revisions.length > 0) {",
                  "        pm.environment.set('revision_id', revisions[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/revisions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "revisions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Revision",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has revision data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('version');",
                  "});",
                  "",
                  "// Save created revision ID",
                  "if (pm.response.code === 201) {",
                  "    const revision = pm.response.json();",
                  "    pm.environment.set('revision_id', revision.id);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"version\": \"v1.0.1\",\n  \"status\": \"{{revisionStatus}}\",\n  \"changes\": {\n    \"diff\": []\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/revisions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "revisions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Revisions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/revisions?page=1&pageSize=10&status={{revisionStatusFilter}}&search=",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "revisions"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "{{revisionStatusFilter}}"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Revision",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/revisions/{{revision_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "revisions",
                "{{revision_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Revision",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"{{revisionStatusUpdated}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/revisions/{{revision_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "revisions",
                "{{revision_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Revision",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}/revisions/{{revision_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "projects",
                "{{project_id}}",
                "revisions",
                "{{revision_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Auth",
      "item": [
        {
          "name": "Get Session",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/get-session",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "get-session"
              ]
            },
            "description": "Mengambil sesi aktif berdasarkan cookie Better Auth"
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const token = pm.environment.get('access_token');",
          "const tokenExpiry = pm.environment.get('token_expiry');",
          "",
          "if (!token || (tokenExpiry && Date.now() > parseInt(tokenExpiry))) {",
          "    console.log('Token expired or missing, need to authenticate first');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "description": "Base URL for the API (change to production URL when needed)"
    },
    {
      "key": "test_email",
      "value": "test@example.com",
      "description": "Test email for authentication"
    },
    {
      "key": "test_password",
      "value": "TestPassword123!",
      "description": "Test password for authentication"
    },
    {
      "key": "test_name",
      "value": "Test User",
      "description": "Test user name for registration"
    },
    {
      "key": "access_token",
      "value": "",
      "description": "JWT access token (automatically set after login)"
    },
    {
      "key": "token_expiry",
      "value": "",
      "description": "Token expiry timestamp (automatically set)"
    },
    {
      "key": "user_id",
      "value": "",
      "description": "Current user ID (automatically set after login)"
    },
    {
      "key": "project_id",
      "value": "",
      "description": "Current project ID (automatically set from responses)"
    },
    {
      "key": "note_id",
      "value": "",
      "description": "Current note ID (automatically set from responses)"
    },
    {
      "key": "todo_id",
      "value": "",
      "description": "Current todo ID (automatically set from responses)"
    },
    {
      "key": "revision_id",
      "value": "",
      "description": "Current revision ID (automatically set from responses)"
    },
    {
      "key": "authCookie",
      "value": ""
    },
    {
      "key": "sessionToken",
      "value": ""
    },
    {
      "key": "projectCategory",
      "value": "web",
      "description": "Project category enum value"
    },
    {
      "key": "projectEnvironment",
      "value": "development",
      "description": "Project environment enum value"
    },
    {
      "key": "noteStatus",
      "value": "draft",
      "description": "Default note status"
    },
    {
      "key": "noteStatusUpdated",
      "value": "active",
      "description": "Status used for note update"
    },
    {
      "key": "noteStatusFilter",
      "value": "draft",
      "description": "Status filter for note list"
    },
    {
      "key": "todoPriority",
      "value": "medium",
      "description": "Default todo priority"
    },
    {
      "key": "todoStatus",
      "value": "pending",
      "description": "Default todo status"
    },
    {
      "key": "todoStatusUpdated",
      "value": "completed",
      "description": "Status used when completing todo"
    },
    {
      "key": "todoStatusFilter",
      "value": "pending",
      "description": "Status filter for todo list"
    },
    {
      "key": "todoPriorityFilter",
      "value": "medium",
      "description": "Priority filter for todo list"
    },
    {
      "key": "revisionStatus",
      "value": "pending",
      "description": "Default revision status"
    },
    {
      "key": "revisionStatusUpdated",
      "value": "approved",
      "description": "Status used when approving revision"
    },
    {
      "key": "revisionStatusFilter",
      "value": "pending",
      "description": "Status filter for revision list"
    }
  ]
}